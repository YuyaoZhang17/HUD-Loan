tail(date_s)
#       exp_dates
# VXV7 2017-10-18
# VXV8 2018-10-17
# VXX7 2017-11-15
# VXX8 2018-11-21
# VXZ7 2017-12-20
# VXZ8 2018-12-19
# Sort sym_bols in descending order by the expiration
# dates in date_s.
# You can use the functions rownames() and order().
### write your code here
sym_bols <- rownames(date_s)[order(date_s[,1], decreasing = TRUE)]
# You should get the following output:
sym_bols
#  [1] "VXJ9" "VXH9" "VXG9" "VXF9" "VXZ8" "VXX8" "VXV8" "VXU8" "VXQ8" "VXN8"
# [11] "VXM8" "VXK8" "VXJ8" "VXH8" "VXG8" "VXF8" "VXZ7" "VXX7" "VXV7" "VXU7"
# [21] "VXQ7" "VXN7" "VXM7" "VXK7" "VXJ7" "VXH7" "VXG7" "VXF7"
# Calculate from date_s the vector of expiration dates
# corresponding to sym_bols, and call it date_s.
### write your code here
date_s <- date_s[sym_bols,]
# You should get the following output:
date_s
#  [1] "2019-04-17" "2019-03-19" "2019-02-13" "2019-01-16" "2018-12-19" "2018-11-21"
#  [7] "2018-10-17" "2018-09-19" "2018-08-22" "2018-07-18" "2018-06-20" "2018-05-16"
# [13] "2018-04-18" "2018-03-21" "2018-02-14" "2018-01-17" "2017-12-20" "2017-11-15"
# [19] "2017-10-18" "2017-09-20" "2017-08-16" "2017-07-19" "2017-06-21" "2017-05-17"
# [25] "2017-04-19" "2017-03-22" "2017-02-15" "2017-01-18"
# 2. (30pts)
# Let chain_ed be the chained VIX futures prices.
# Start by initializing chain_ed to be equal to sym_bols[1].
# You can use the function get().
### write your code here
chain_ed <- get(x=sym_bols, envir=vix_env)
# You should get the following output:
head(chain_ed)
#             Open  High   Low Close Volume
# 2018-07-23 17.33 17.35 17.32 17.32     30
# 2018-07-24 17.20 17.36 17.16 17.16    204
# 2018-07-25 17.30 17.30 17.02 17.09    339
# 2018-07-26 17.10 17.11 17.01 17.02    327
# 2018-07-27 17.15 17.28 17.10 17.12    291
# 2018-07-30 17.15 17.36 17.15 17.30    105
tail(chain_ed)
#             Open  High   Low Close Volume
# 2018-07-27 17.15 17.28 17.10 17.12    291
# 2018-07-30 17.15 17.36 17.15 17.30    105
# 2018-07-31 17.12 17.25 17.11 17.11     61
# 2018-08-01 17.17 17.17 16.90 17.16    114
# 2018-08-02 17.14 17.45 17.05 17.07    371
# 2018-08-03 17.05 17.05 16.85 16.98    353
# Perform a for() loop, and one-by-one add to chain_ed
# the VIX futures prices given by the remaining sym_bols.
# Hint: Adapt code from the slide:
#   Chaining Together Futures Prices
for (sym_bol in sym_bols[-1]) {
cat("Chaining the symbol: ", sym_bol, "\n")
# Get data for sym_bol
### write your code here
price_s <- get(x=sym_bol,envir = vix_env)
# Calculate end date of price_s
en_d <- end(price_s)
star_t <- (en_d - 20)
# cbind overlapping volume data of price_s and chain_ed, between star_t and en_d
### write your code here
vol_ume <- cbind(Vo(price_s),
Vo(chain_ed))[paste0(star_t, "/", en_d)]
colnames(vol_ume) <- c("price_s", "chain_ed")
# Find date when volume of price_s first exceeds chain_ed
### write your code here
exceed_s <- (vol_ume[, 'price_s'] > vol_ume[, 'chain_ed'])
in_deks <- min(which(exceed_s))
# Scale the prices
### write your code here
in_deks <- index(exceed_s[in_deks])
fac_tor <- as.numeric(Cl(chain_ed[in_deks])/Cl(price_s[in_deks]))
price_s[, 1:4] <- fac_tor*price_s[, 1:4]
# Chain price_s to chain_ed
### write your code here
chain_ed <-rbind(chain_ed[index(chain_ed) >= in_deks],
price_s[index(price_s) < in_deks])
}  # end for
# You should get the following output:
all.equal(vix_env$chain_ed, chain_ed)
# [1] TRUE
############## Part II
# Summary: Calculate a vector of constant maturity
# VIX futures prices in a loop.
# 1. (10pts)
# Calculate a vector of 5 monthly maturity dates,
# starting 1 month from the date to_day equal to "2018-05-07".
# You can use the functions as.Date() and seq.Date() with
# by="month" and length.out=12.
### write your code here
to_day <- as.Date("2018-06-15")
maturi_ties <- seq.Date(from=to_day+30, by="month", length.out = 6)
# You should get the following output:
maturi_ties
# [1] "2018-07-15" "2018-08-15" "2018-09-15" "2018-10-15" "2018-11-15" "2018-12-15"
# 2. (30pts)
# Perform an sapply() loop to calculate the constant
# maturity futures prices corresponding to the maturi_ties.
# You can use the vector date_s from the previous part.
# You can use the functions sapply(), match(), get(),
# and as.numeric()
# Hint: Adapt code from the slide:
#   Futures Prices at Constant Maturity
price_s <- sapply(maturi_ties, function(maturi_ty) {
cat("Constant maturity: ", format(maturi_ty), "\n")
# Find futures contracts with expiration dates close to maturi_ty
### write your code here
in_deks <- match(FALSE, date_s > maturi_ty)
front_symbol <- sym_bols[in_deks]
back_symbol <- sym_bols[in_deks-1]
front_date <- date_s[in_deks]
back_date <- date_s[in_deks-1]
# Get the futures prices to_day
### write your code here
front_price <- get(x=front_symbol, envir=vix_env)
front_price <- as.numeric(Cl(front_price[to_day]))
back_price <- get(x=back_symbol, envir=vix_env)
back_price <- as.numeric(Cl(back_price[to_day]))
# Calculate the constant maturity futures price
### write your code here
fra_c <- as.numeric(maturi_ty - front_date) /
as.numeric(back_date - front_date)
(fra_c*back_price +
(1-fra_c)*front_price)
})  # end sapply
# Coerce price_s to an xts series, using
# the functions xts() and colnames()
### write your code here
price_s <- xts(price_s,order.by = maturi_ties)
colnames(price_s) <- "VIX_futures"
# You should get the following output:
price_s
#            VIX_futures
# 2018-07-15    13.62679
# 2018-08-15    14.27000
# 2018-09-15    14.92286
# 2018-10-15    15.55786
# 2018-11-15    15.81543
# 2018-12-15    15.93714
#################################
### FRE7241 Test #6 May 21, 2019
#################################
# Max score 90pts
############## Part I
# Summary: Chain together VIX futures prices in a loop.
# Hint: Adapt code from the slides
#   Futures Prices at Constant Maturity
# and
#   VIX Futures Curve
library(HighFreq)
# 1. (20pts)
# Read the CBOE VIX futures expiration dates from the
# file vix_futures.csv into a data frame called date_s.
# The row names of date_s are the VIX futures symbols.
# Coerce the single column of date_s to class Date.
# You can use the functions read.csv() and as.Date().
### write your code here
date_s <- read.csv(file="D:/NYU/Curriculum/FRE-7241/vix_futures.csv",
stringsAsFactors=FALSE, row.names=1)
date_s[,1] <- as.Date(date_s[,1])
# You should get the following output:
dim(date_s)
# [1] 28  1
class(date_s)
# [1] "data.frame"
tail(date_s)
#       exp_dates
# VXN9 2019-07-17
# VXQ9 2019-08-21
# VXU9 2019-09-18
# VXV9 2019-10-16
# VXX9 2019-11-20
# VXZ9 2019-12-18
# Load VIX futures data from the binary file vix_cboe.RData.
load(file="D:/NYU/Curriculum/FRE-7241/vix_cboe.RData")
# The file vix_cboe.RData contains an environment called
# vix_env, which contains the VIX futures data.
# The prices of the individual VIX futures contracts have
# names containing the string "*VX*".
# Calculate a vector of strings called sym_bols, with
# the names of all the individual VIX futures contracts
# in vix_env.
# You can use the functions grep(), glob2rx(), and ls().
sym_bols <- ls(vix_env)
sym_bols <- sym_bols[grep(glob2rx("*VX*"), sym_bols)]
# You should get the following output:
sym_bols
#  [1] "VXF7" "VXF8" "VXF9" "VXG7" "VXG8" "VXG9" "VXH7" "VXH8" "VXH9" "VXJ7" "VXJ8"
# [12] "VXJ9" "VXK7" "VXK8" "VXM7" "VXM8" "VXN7" "VXN8" "VXQ7" "VXQ8" "VXU7"
# [23] "VXU8" "VXV7" "VXV8" "VXX7" "VXX8" "VXZ7" "VXZ8"
# Subset the data frame called date_s, to extract only
# the rows corresponding to sym_bols.
# Use subsetting with drop=FALSE to preserve the data frame.
### write your code here
date_s <- date_s[sym_bols,,drop=FALSE]
# You should get the following output:
dim(date_s)
# [1] 28  1
tail(date_s)
#       exp_dates
# VXV7 2017-10-18
# VXV8 2018-10-17
# VXX7 2017-11-15
# VXX8 2018-11-21
# VXZ7 2017-12-20
# VXZ8 2018-12-19
# Sort sym_bols in descending order by the expiration
# dates in date_s.
# You can use the functions rownames() and order().
### write your code here
sym_bols <- rownames(date_s)[order(date_s[,1], decreasing = TRUE)]
# You should get the following output:
sym_bols
#  [1] "VXJ9" "VXH9" "VXG9" "VXF9" "VXZ8" "VXX8" "VXV8" "VXU8" "VXQ8" "VXN8"
# [11] "VXM8" "VXK8" "VXJ8" "VXH8" "VXG8" "VXF8" "VXZ7" "VXX7" "VXV7" "VXU7"
# [21] "VXQ7" "VXN7" "VXM7" "VXK7" "VXJ7" "VXH7" "VXG7" "VXF7"
# Calculate from date_s the vector of expiration dates
# corresponding to sym_bols, and call it date_s.
### write your code here
date_s <- date_s[sym_bols,]
# You should get the following output:
date_s
#  [1] "2019-04-17" "2019-03-19" "2019-02-13" "2019-01-16" "2018-12-19" "2018-11-21"
#  [7] "2018-10-17" "2018-09-19" "2018-08-22" "2018-07-18" "2018-06-20" "2018-05-16"
# [13] "2018-04-18" "2018-03-21" "2018-02-14" "2018-01-17" "2017-12-20" "2017-11-15"
# [19] "2017-10-18" "2017-09-20" "2017-08-16" "2017-07-19" "2017-06-21" "2017-05-17"
# [25] "2017-04-19" "2017-03-22" "2017-02-15" "2017-01-18"
# 2. (30pts)
# Let chain_ed be the chained VIX futures prices.
# Start by initializing chain_ed to be equal to sym_bols[1].
# You can use the function get().
### write your code here
chain_ed <- get(x=sym_bols, envir=vix_env)
# You should get the following output:
head(chain_ed)
#             Open  High   Low Close Volume
# 2018-07-23 17.33 17.35 17.32 17.32     30
# 2018-07-24 17.20 17.36 17.16 17.16    204
# 2018-07-25 17.30 17.30 17.02 17.09    339
# 2018-07-26 17.10 17.11 17.01 17.02    327
# 2018-07-27 17.15 17.28 17.10 17.12    291
# 2018-07-30 17.15 17.36 17.15 17.30    105
tail(chain_ed)
#             Open  High   Low Close Volume
# 2018-07-27 17.15 17.28 17.10 17.12    291
# 2018-07-30 17.15 17.36 17.15 17.30    105
# 2018-07-31 17.12 17.25 17.11 17.11     61
# 2018-08-01 17.17 17.17 16.90 17.16    114
# 2018-08-02 17.14 17.45 17.05 17.07    371
# 2018-08-03 17.05 17.05 16.85 16.98    353
# Perform a for() loop, and one-by-one add to chain_ed
# the VIX futures prices given by the remaining sym_bols.
# Hint: Adapt code from the slide:
#   Chaining Together Futures Prices
for (sym_bol in sym_bols[-1]) {
cat("Chaining the symbol: ", sym_bol, "\n")
# Get data for sym_bol
### write your code here
price_s <- get(x=sym_bol,envir = vix_env)
# Calculate end date of price_s
en_d <- end(price_s)
star_t <- (en_d - 20)
# cbind overlapping volume data of price_s and chain_ed, between star_t and en_d
### write your code here
vol_ume <- cbind(Vo(price_s),
Vo(chain_ed))[paste0(star_t, "/", en_d)]
colnames(vol_ume) <- c("price_s", "chain_ed")
# Find date when volume of price_s first exceeds chain_ed
### write your code here
exceed_s <- (vol_ume[, 'price_s'] > vol_ume[, 'chain_ed'])
in_deks <- min(which(exceed_s))
# Scale the prices
### write your code here
in_deks <- index(exceed_s[in_deks])
fac_tor <- as.numeric(Cl(chain_ed[in_deks])/Cl(price_s[in_deks]))
price_s[, 1:4] <- fac_tor*price_s[, 1:4]
# Chain price_s to chain_ed
### write your code here
chain_ed <-rbind(chain_ed[index(chain_ed) >= in_deks],
price_s[index(price_s) < in_deks])
}  # end for
# You should get the following output:
all.equal(vix_env$chain_ed, chain_ed)
# [1] TRUE
############## Part II
# Summary: Calculate a vector of constant maturity
# VIX futures prices in a loop.
# 1. (10pts)
# Calculate a vector of 5 monthly maturity dates,
# starting 1 month from the date to_day equal to "2018-05-07".
# You can use the functions as.Date() and seq.Date() with
# by="month" and length.out=12.
### write your code here
to_day <- as.Date("2018-06-15")
maturi_ties <- seq.Date(from=to_day+30, by="month", length.out = 6)
# You should get the following output:
maturi_ties
# [1] "2018-07-15" "2018-08-15" "2018-09-15" "2018-10-15" "2018-11-15" "2018-12-15"
# 2. (30pts)
# Perform an sapply() loop to calculate the constant
# maturity futures prices corresponding to the maturi_ties.
# You can use the vector date_s from the previous part.
# You can use the functions sapply(), match(), get(),
# and as.numeric()
# Hint: Adapt code from the slide:
#   Futures Prices at Constant Maturity
price_s <- sapply(maturi_ties, function(maturi_ty) {
cat("Constant maturity: ", format(maturi_ty), "\n")
# Find futures contracts with expiration dates close to maturi_ty
### write your code here
in_deks <- match(FALSE, date_s > maturi_ty)
front_symbol <- sym_bols[in_deks]
back_symbol <- sym_bols[in_deks-1]
front_date <- date_s[in_deks]
back_date <- date_s[in_deks-1]
# Get the futures prices to_day
### write your code here
front_price <- get(x=front_symbol, envir=vix_env)
front_price <- as.numeric(Cl(front_price[to_day]))
back_price <- get(x=back_symbol, envir=vix_env)
back_price <- as.numeric(Cl(back_price[to_day]))
# Calculate the constant maturity futures price
### write your code here
fra_c <- as.numeric(maturi_ty - front_date) /
as.numeric(back_date - front_date)
(fra_c*back_price +
(1-fra_c)*front_price)
})  # end sapply
# Coerce price_s to an xts series, using
# the functions xts() and colnames()
### write your code here
price_s <- xts(price_s,order.by = maturi_ties)
colnames(price_s) <- "VIX_futures"
# You should get the following output:
price_s
#            VIX_futures
# 2018-07-15    13.62679
# 2018-08-15    14.27000
# 2018-09-15    14.92286
# 2018-10-15    15.55786
# 2018-11-15    15.81543
# 2018-12-15    15.93714
reticulate::repl_python()
#!/usr/bin/env python
# coding: utf-8
shiny::runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
runApp('C:/Users/19018/Dropbox/Yuyao Data Repository/HUD/HUD_health.R')
data=read.csv("City Data of HUD_Health Care Facilities.csv")
data
data <- read.csv("City Data of HUD_Health Care Facilities.csv")
data=read.csv("City Data of HUD_Health Care Facilities.csv")
data=read.csv("./City Data of HUD_Health Care Facilities.csv")
data=read.csv("./City Data of HUD_Health Care Facilities.csv",header = TRUE)
data=read.csv("City Data of HUD_Health Care Facilities.csv",header = TRUE)
data <- read.csv("City Data of HUD_Health Care Facilities.csv",header = TRUE)
data <- read.csv(file="City Data of HUD_Health Care Facilities.csv",header = TRUE)
data <- read.table(file="City Data of HUD_Health Care Facilities.csv")
data <- read.table(file="~City Data of HUD_Health Care Facilities.csv")
data <- read.table(file=".City Data of HUD_Health Care Facilities.csv")
data <- read.table(file="/City Data of HUD_Health Care Facilities.csv")
data <- read.table(file="//City Data of HUD_Health Care Facilities.csv")
getwd()
setwd("C:\Users\19018\Dropbox\Yuyao Data Repository\HUD")
setwd("C:/Users/19018/Dropbox/Yuyao Data Repository/HUD")
data <- read.table(file="//City Data of HUD_Health Care Facilities.csv")
data <- read.table(file="City Data of HUD_Health Care Facilities.csv")
data <- read.csv(file="City Data of HUD_Health Care Facilities.csv",header=TRUE)
data
View(data)
View(data)
ggplot(data_sub,aes(x=data_sub["Week"],y=data_sub["INTEREST RATE"]),size=3)+
plots
data_sub=data[data["PROPERTY CITY"]=="CHICAGO"]
plots=geom_line(aes(y=data_sub["20 Yr"]),size=3)
data_sub=data[data$PROPERTY.CITY=="CHICAGO"]
data$PROPERTY.CITY
data$PROPERTY.CITY=="CHICAGO"
data[data$PROPERTY.CITY=="CHICAGO"]
data[which(data$PROPERTY.CITY=="CHICAGO")]
[which(data$PROPERTY.CITY=="CHICAGO"),]
which(data$PROPERTY.CITY=="CHICAGO")
data[which(data$PROPERTY.CITY=="CHICAGO"), ]
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
plots=geom_line(aes(y=data_sub$X20.Yr ),size=3)
ggplot(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)+
plots
data_sub
ggplot(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)+plots
ggplot(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)
data_sub$INTEREST.RATE
ggplot(data_sub,aes(x=data_sub$Week,y=data_sub$X20.Yr),size=3)
ggplot()+geo_line(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3))
ggplot()+geo_line(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)
ggplot()+geom_line(data_sub,aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)
ggplot(data_sub)+geom_line(aes(x=data_sub$Week,y=data_sub$INTEREST.RATE),size=3)
ggplot(data_sub)+geom_line(aes(x=Week,y=INTEREST.RATE),size=3)
ggplot(data_sub)+geom_line(aes(x=as.numeric(Week),y=INTEREST.RATE),size=3)
plots=geom_line(aes(y=data_sub$X20.Yr ))
ggplot(data_sub)+geom_line(aes(x=as.numeric(Week),y=INTEREST.RATE))+plots
x=as.numeric(data_sub$Week)
plots=geom_line(aes(x,y=data_sub$X20.Yr ))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE))+plots
data=read.csv("City Data of HUD_Health Care Facilities.csv",header = TRUE)
View(data)
View(data)
runApp('HUD_health.R')
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
x=data_sub$Week
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
data$Week <- format(as.Date(data$Week), "%Y")
data
data$Week
data <- read.csv(file="City Data of HUD_Health Care Facilities.csv",header=TRUE)
data$Year <- format(as.Date(data$Week), "%Y")
data$Week
data$Year
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=data_sub$Year
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
data$Year <- format(as.Date(data$Week), "%m-%Y")
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=data_sub$Year
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
data$Year <- format(as.Date(data$Week), "%m%Y")
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=data_sub$Year
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
data <- read.csv(file="City Data of HUD_Health Care Facilities.csv",header=TRUE)
library(ggplot2)
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=data_sub$Week
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
x=data_sub$Week
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
axis(1,at=seq(1,10,0.5))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots
axis(1,at=seq(1,10,0.5))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+
scale_x_continuous(breaks=seq(0, 10, 5))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+
scale_x_date(date_labels = "%m %Y")
data$Date <- format(as.Date(data$Week))
data$Date
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=data_sub$Date
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+
scale_x_date(date_labels = "%m %Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+scale_x_date(date_breaks = "1 week", date_labels = "%W")
class(data$Date)
data <- read.csv(file="City Data of HUD_Health Care Facilities.csv",header=TRUE)
data$Date <- format(as.Date(data$Week))
class(data$Week)
x=as.Date(data_sub$Date)
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+scale_x_date(date_breaks = "1 week", date_labels = "%W")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+scale_x_date(date_breaks = "1 Year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
scale_colour_manual(values=cbPalette)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
scale_colour_manual(values=cbPalette)
data_sub=data[which(data$PROPERTY.CITY=="CHICAGO"), ]
x=as.Date(data_sub$Date)
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1))
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1))+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour=cbPalette)+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),cbPalette[0])+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour=cbPalette[0])+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),"r")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour="red")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),t="blue", ldw=3, col="l")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1),show.legend = "X20.Yr")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),show.legend = "Loan Rate")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),show.legend = TRUE)+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1),show.legend = TRUE)
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),show.legend = TRUE)+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour="1")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
plots=geom_line(aes(x,y=data_sub$X20.Yr,group=1),colour="2")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour="1")+plots+scale_x_date(date_breaks = "1 year", date_labels = "%Y")
ggplot(data = melt(data_sub, id.var="Week"), aes(x, y=value)) +
geom_line(aes(colour=variable, group=variable)) +
geom_point(aes(colour=variable, shape=variable, group=variable), size=4)
library(reshape2)
ggplot(data = melt(data_sub, id.var="Week"), aes(x, y=value)) +
geom_line(aes(colour=variable, group=variable)) +
geom_point(aes(colour=variable, shape=variable, group=variable), size=4)
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour="1")+plots+
scale_x_date(date_breaks = "1 year", date_labels = "%Y")++ theme(legend.position="right")
ggplot(data_sub)+geom_line(aes(x,y=INTEREST.RATE,group=1),colour="1")+plots+
scale_x_date(date_breaks = "1 year", date_labels = "%Y")+ theme(legend.position="right")
